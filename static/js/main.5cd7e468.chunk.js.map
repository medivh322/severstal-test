{"version":3,"sources":["redux/constants/index.js","components/loginForm/index.js","components/news/index.js","components/profile/index.js","components/profileRoute/index.js","App.js","serviceWorker.js","redux/sagas/index.js","redux/store/index.js","index.js"],"names":["GET_NEWS","AUTH_USER","LOGOUT_USER","AUTH_REQUEST","LOGOUT_REQUEST","LoginForm","useState","login","setLogin","password","setPassword","isValid","setIsValid","dispatch","useDispatch","handleChangeInput","e","target","getAttribute","value","to","className","Form","Group","controlId","Label","Control","onChange","type","Button","onClick","variant","News","users","useSelector","state","news","useEffect","length","map","elem","i","title","id","Profile","PrivateRoute","Component","component","rest","isLoggin","isAuth","render","App","auth","Container","fluid","exact","path","Boolean","window","location","hostname","match","getNews","authUser","logoutUser","mainSagas","fetchNews","fetch","then","response","json","data","call","put","payload","localStorage","setItem","takeLatest","initialState","getItem","sagaMiddleware","createSagaMiddleware","store","createStore","action","applyMiddleware","run","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cd7e468.chunk.js","sourcesContent":["export const GET_NEWS = 'GET_NEWS';\r\nexport const AUTH_USER = 'AUTH_USER';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\n\r\nexport const GET_NEWS_REQUEST = 'GET_NEWS_REQUEST';\r\nexport const AUTH_REQUEST = 'AUTH_REQUEST';\r\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n","import Button from \"@restart/ui/esm/Button\";\r\nimport { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { AUTH_REQUEST } from \"../../redux/constants\";\r\n\r\nconst LoginForm = () => {\r\n    const [login, setLogin] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isValid, setIsValid] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    function handleChangeInput(e) {\r\n        (e.target.getAttribute(\"id\") === \"login\") ? setLogin(e.target.value) : setPassword(e.target.value);\r\n    }\r\n\r\n    function SubmitForm(e) {\r\n        if (login !== \"Admin\" || password !== \"12345\") {\r\n            setIsValid(false);\r\n            return false;\r\n        }\r\n        dispatch({ type: AUTH_REQUEST });\r\n        setIsValid(true);\r\n    }\r\n\r\n    return (\r\n        (isValid === true) ? <Redirect to=\"/profile\" /> :\r\n            <>\r\n                <div className=\"form_login\">\r\n                    <Form.Group className=\"mb-3\" controlId=\"login\">\r\n                        <Form.Label>username:</Form.Label>\r\n                        <Form.Control onChange={handleChangeInput} type=\"text\" />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"password\">\r\n                        <Form.Label>password:</Form.Label>\r\n                        <Form.Control onChange={handleChangeInput} type=\"password\" />\r\n                    </Form.Group>\r\n                    <Button onClick={SubmitForm} variant=\"primary\">\r\n                        Log In\r\n                    </Button>\r\n                    {isValid === false ? <div className=\"error_valid\">Имя пользователя или пароль введены не верно</div> : \"\"}\r\n                </div>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst News = () => {\r\n    const users = useSelector((state) => state.news);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(users.length) return false;\r\n        dispatch({type: 'GET_NEWS_REQUEST'});\r\n    }, [users, dispatch]);\r\n\r\n    return(\r\n        <ul>\r\n            {users.map((elem, i) => \r\n                <li key={elem.id}>\r\n                    {elem.title}   \r\n                </li>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default News;","const Profile = () => {\r\n    return(\r\n        <div>\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam iaculis porttitor justo. Suspendisse nec risus finibus, fringilla libero ultricies, faucibus quam. Aliquam erat volutpat. Donec tortor neque, lacinia interdum aliquet a, bibendum nec tellus. Proin ut rhoncus ex. Curabitur sed est quam. Sed in porta libero, at aliquet massa. Suspendisse vestibulum efficitur massa venenatis molestie. Nulla facilisi. Sed feugiat tempus velit ut ullamcorper. Donec eros urna, egestas at ex placerat, viverra ullamcorper lacus.\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    let isLoggin = useSelector(state => state.isAuth);\r\n\r\n    return(\r\n        <Route\r\n            {...rest}\r\n            render={() => (!isLoggin) ? <Redirect to=\"/login\" /> : <Component />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router,\n  Switch,\n  Route,\n  Link } from 'react-router-dom';\nimport LoginForm from './components/loginForm';\nimport News from './components/news';\nimport Profile from './components/profile';\nimport PrivateRoute from './components/profileRoute';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { LOGOUT_REQUEST } from './redux/constants';\n\nfunction App() {\n  const auth = useSelector(state => state.isAuth);\n  const dispatch = useDispatch();\n\n  function logout(){\n    dispatch({type: LOGOUT_REQUEST});\n  }\n\n  return (\n    <Router>\n      <Container fluid>\n        <nav>\n          <ul className=\"nav_list\">\n            <li>\n              <Link to=\"/\">Главная</Link>\n            </li>\n            <li>\n              <Link to=\"/news\">Новости</Link>\n            </li>\n            <li>\n              <Link to=\"/profile\">Профиль</Link>\n            </li>\n            {auth ? <li className=\"btn_logout\" onClick={logout}>Выйти</li> : \"\"}\n          </ul>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\">\n            Главная\n          </Route>\n          <PrivateRoute path=\"/profile\" component={Profile} />\n          <Route path=\"/news\">\n            <News />\n          </Route>\n          <Route path=\"/login\">\n            <LoginForm />\n          </Route>\n        </Switch> \n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport { AUTH_REQUEST, AUTH_USER, GET_NEWS, GET_NEWS_REQUEST, LOGOUT_REQUEST, LOGOUT_USER } from '../constants';\r\n\r\nfunction fetchNews(){\r\n    return fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(response => response.json())\r\n        .then(data => data);\r\n}\r\n\r\nfunction* getNews(){\r\n    const response = yield call(fetchNews);\r\n    yield put({type: GET_NEWS, payload: response});\r\n}\r\n\r\nfunction* authUser(){\r\n    yield localStorage.setItem('isAuth', true);\r\n    yield put({type: AUTH_USER, payload: true});\r\n}\r\n\r\nfunction* logoutUser(){\r\n    yield localStorage.setItem('isAuth', false);\r\n    yield put({type: LOGOUT_USER, payload: false})\r\n}\r\n\r\nfunction* mainSagas(){\r\n    yield takeLatest(GET_NEWS_REQUEST, getNews);\r\n    yield takeLatest(AUTH_REQUEST, authUser);\r\n    yield takeLatest(LOGOUT_REQUEST, logoutUser);\r\n}\r\n\r\nexport default mainSagas;","import createSagaMiddleware from \"@redux-saga/core\"\r\nimport { applyMiddleware, createStore } from \"redux\"\r\nimport { AUTH_USER, GET_NEWS, LOGOUT_USER } from \"../constants\"\r\nimport mainSagas from \"../sagas\"\r\n\r\nconst initialState = {\r\n    news: [],\r\n    isAuth: (localStorage.getItem(\"isAuth\") === \"true\") ? true : false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case GET_NEWS:\r\n            return {\r\n                ...state, \r\n                news: action.payload\r\n            }\r\n        case AUTH_USER:\r\n            return {\r\n                ...state,\r\n                isAuth: action.payload\r\n            }\r\n        case LOGOUT_USER:\r\n            return {\r\n                ...state,\r\n                isAuth: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(sagaMiddleware)\r\n)\r\n\r\nsagaMiddleware.run(mainSagas);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}